// Generated by ts-to-zod
import { z } from 'zod';

export const subscriptionParamsSchema = z.object({
  duration: z.number(),
  price: z.number(),
});

export const rentingParamsSchema = z.object({
  duration: z.number(),
  price: z.number(),
});

export const sellingParamsSchema = z.object({
  price: z.number(),
});

export const successWithTransactionHashSchema = z.object({
  txHash: z.string(),
});

export const consumeProtectedDataStatusesSchema = z.union([
  z.literal('CONSUME_ORDER_REQUESTED'),
  z.literal('CONSUME_TASK_ACTIVE'),
  z.literal('CONSUME_TASK_ERROR'),
  z.literal('CONSUME_TASK_COMPLETED'),
  z.literal('CONSUME_RESULT_DOWNLOAD'),
  z.literal('CONSUME_RESULT_DECRYPT'),
  z.literal('CONSUME_RESULT_COMPLETE'),
]);

export const consumeProtectedDataResponseSchema = z.object({
  txHash: z.string(),
  dealId: z.string(),
  taskId: z.string(),
  contentAsObjectURL: z.string(),
});

export const getResultFromCompletedTaskResponseSchema = z.object({
  contentAsObjectURL: z.string(),
});

export const getCollectionOwnersParamsSchema = z.object({
  limit: z.number().optional(),
});

export const removeCollectionParamsSchema = z.object({
  collectionId: z.number(),
});

export const createCollectionResponseSchema = z.object({
  collectionId: z.number(),
  txHash: z.string(),
});

export const addToCollectionStatusesSchema = z.union([
  z.literal('APPROVE_COLLECTION_CONTRACT'),
  z.literal('ADD_PROTECTED_DATA_TO_COLLECTION'),
]);

export const setSubscriptionParamsSchema = z.object({
  collectionId: z.number(),
  price: z.number(),
  duration: z.number(),
});

export const subscribeToCollectionParamsSchema = z.object({
  collectionId: z.number(),
  price: z.number(),
  duration: z.number(),
});

export const addOnlyAppWhitelistSchema = z.object({
  address: z.string(),
  owner: z.string(),
  apps: z.array(
    z.object({
      address: z.string(),
    })
  ),
});

const addressOrENSSchema = z.any();

const addressSchema = z.any();

const onStatusUpdateFnSchema = z.any();

const collectionSubscriptionSchema = z.any();

export const collectionSchema = z.object({
  collectionId: z.number(),
  collectionOwner: addressSchema,
  size: z.number(),
  latestSubscriptionExpiration: z.number(),
  subscriptionParams: z.object({
    price: z.number(),
    duration: z.number(),
  }),
});

export const protectedDataInCollectionSchema = z.object({
  id: addressOrENSSchema,
  name: z.string(),
  creationTimestamp: z.number(),
  owner: z.object({
    id: addressOrENSSchema,
  }),
  collection: z.object({
    id: z.number(),
    owner: z.object({
      id: z.string(),
    }),
  }),
  isRentable: z.boolean(),
  rentalParams: rentingParamsSchema.optional(),
  rentals: z.array(
    z.object({
      renter: addressOrENSSchema,
      endDate: z.string(),
    })
  ),
  isForSale: z.boolean(),
  saleParams: sellingParamsSchema.optional(),
  isIncludedInSubscription: z.boolean(),
});

export const getProtectedDataInCollectionsResponseSchema = z.object({
  protectedDataInCollection: z.array(protectedDataInCollectionSchema),
});

export const sharingContractConsumerSchema = z.object({
  sharingContractAddress: addressOrENSSchema,
});

export const getProtectedDataPricingParamsSchema = z.object({
  protectedData: addressOrENSSchema,
});

export const getProtectedDataPricingParamsResponseSchema = z.object({
  protectedDataPricingParams: z.object({
    address: addressSchema,
    name: z.string(),
    isRentable: z.boolean(),
    isIncludedInSubscription: z.boolean(),
    isForSale: z.boolean(),
    collection: z
      .object({
        subscriptionParams: subscriptionParamsSchema.optional(),
      })
      .optional(),
    rentalParam: rentingParamsSchema.optional(),
  }),
});

export const consumeProtectedDataParamsSchema = z.object({
  protectedData: addressOrENSSchema,
  app: addressOrENSSchema,
  workerpool: addressOrENSSchema.optional(),
  onStatusUpdate: onStatusUpdateFnSchema.optional(),
});

export const getResultFromCompletedTaskParamsSchema = z.object({
  taskId: z.string(),
  onStatusUpdate: onStatusUpdateFnSchema.optional(),
});

export const collectionOwnerSchema = z.object({
  id: addressSchema,
  hasActiveSubscription: z.boolean(),
  collections: z.array(
    z.object({
      id: addressSchema,
      creationTimestamp: z.number(),
      subscriptionParams: subscriptionParamsSchema,
    })
  ),
});

export const getCollectionOwnersResponseSchema = z.object({
  collectionOwners: z.array(collectionOwnerSchema),
});

export const addToCollectionParamsSchema = z.object({
  collectionId: z.number(),
  protectedData: addressOrENSSchema,
  addOnlyAppWhitelist: addressSchema,
  onStatusUpdate: onStatusUpdateFnSchema.optional(),
});

export const removeFromCollectionParamsSchema = z.object({
  protectedData: addressOrENSSchema,
});

export const getCollectionsByOwnerParamsSchema = z.object({
  owner: addressOrENSSchema,
  includeHiddenProtectedDatas: z.boolean().optional(),
});

export const collectionWithProtectedDatasSchema = z.object({
  id: z.number(),
  owner: z.object({
    id: addressOrENSSchema,
  }),
  creationTimestamp: z.number(),
  protectedDatas: z.array(protectedDataInCollectionSchema),
  subscriptionParams: subscriptionParamsSchema.optional(),
  subscriptions: z.array(
    z.object({
      subscriber: z.object({
        id: addressSchema,
      }),
      endDate: z.number(),
    })
  ),
});

export const getProtectedDataInCollectionsParamsSchema = z.object({
  protectedData: addressSchema.optional(),
  collectionId: z.number().optional(),
  collectionOwner: addressOrENSSchema.optional(),
  createdAfterTimestamp: z.number().optional(),
  isRentable: z.boolean().optional(),
  isForSale: z.boolean().optional(),
  isDistributed: z.boolean().optional(),
  page: z.number().optional(),
  pageSize: z.number().optional(),
});

export const setProtectedDataToSubscriptionParamsSchema = z.object({
  protectedData: addressOrENSSchema,
});

export const getCollectionSubscriptionsResponseSchema = z.object({
  collectionSubscriptions: z.array(collectionSubscriptionSchema),
});

export const getCollectionSubscriptionsParamsSchema = z.object({
  subscriberAddress: addressOrENSSchema.optional(),
  collectionId: z.number().optional(),
  includePastSubscriptions: z.boolean().optional(),
});

export const removeProtectedDataFromSubscriptionParamsSchema = z.object({
  protectedData: addressOrENSSchema,
});

export const setProtectedDataToRentingParamsSchema = z.object({
  protectedData: addressOrENSSchema,
  price: z.number(),
  duration: z.number(),
});

export const removeProtectedDataFromRentingParamsSchema = z.object({
  protectedData: addressOrENSSchema,
});

export const rentProtectedDataParamsSchema = z.object({
  protectedData: addressOrENSSchema,
  price: z.number(),
  duration: z.number(),
});

export const protectedDataRentalSchema = z.object({
  id: z.string(),
  renter: addressSchema,
  protectedData: z.object({
    id: addressOrENSSchema,
    name: z.string(),
  }),
  creationTimestamp: z.number(),
  endDate: z.number(),
  rentalParams: rentingParamsSchema,
});

export const getRentalsParamsSchema = z.object({
  renterAddress: addressOrENSSchema.optional(),
  protectedData: addressOrENSSchema.optional(),
  includePastRentals: z.boolean().optional(),
});

export const getRentalsResponseSchema = z.object({
  rentals: z.array(protectedDataRentalSchema),
});

export const setProtectedDataForSaleParamsSchema = z.object({
  protectedData: addressOrENSSchema,
  price: z.number(),
});

export const removeProtectedDataForSaleParamsSchema = z.object({
  protectedData: addressOrENSSchema,
});

export const buyProtectedDataParamsSchema = z.object({
  protectedData: addressOrENSSchema,
  price: z.number(),
  addToCollectionId: z.number().optional(),
  addOnlyAppWhitelist: addressSchema.optional(),
});

export const addAppToAppWhitelistParamsSchema = z.object({
  addOnlyAppWhitelist: addressSchema,
  app: addressOrENSSchema,
});

export const createAppWhitelistResponseSchema = z.object({
  addOnlyAppWhitelist: addressSchema,
  txHash: z.string(),
});

export const getUserAppWhitelistParamsSchema = z.object({
  user: addressOrENSSchema.optional(),
});

export const getUserAppWhitelistResponseSchema = z.object({
  addOnlyAppWhitelists: z.array(addOnlyAppWhitelistSchema),
});

export const protectedDataDetailsSchema = z.object({
  collection: collectionSchema,
  addOnlyAppWhitelist: z.string(),
  latestRentalExpiration: z.number(),
  isInSubscription: z.boolean(),
  rentingParams: z.object({
    isForRent: z.boolean(),
    price: z.number(),
    duration: z.number(),
  }),
  sellingParams: z.object({
    isForSale: z.boolean(),
    price: z.number(),
  }),
});

export const getCollectionsByOwnerResponseSchema = z.object({
  collections: z.array(collectionWithProtectedDatasSchema),
});
